syntax = "proto3";

option go_package = "github.com/CPEN391-Team-4/backend";

package route;

message User {
  string name = 1;
  bool restricted = 2;
  Photo Photo = 3;
  string mainUser = 4;
}
message Photo {
  bytes image = 1;
  string fileExtension = 2;
}
message UserNames{
  repeated string usernames = 1;
}
message Empty {}
message FaceVerificationReq {
  Photo Photo = 1;
  string mainUser = 2;
}
message FaceVerificationResp {
  string user = 1;
  float confidence = 2;
  bool accept = 3;
}

message HistoryRecord{
  string name = 1;
  string status = 2;
  string imageLocation = 3;
  string time = 4;
}

message HistoryRecords{
  repeated HistoryRecord record = 1;
}

message ImageLocation{
  string address = 1;
  string mainUser = 2;
}



message Timestamp{
  string starttime = 1;
  string endtime = 2;
  string mainUser = 3;
}

message Permission{
  string usernames = 1;  //could be none, if the user is not a truested user
  int64 userid = 2;     // used to update the recorded table status
  bool permit = 3;     //  if agree to access set to 1, rejected set to 0
  string mainUser = 4;
}

message DeviceVerify{
  string deviceid = 1;
  string token = 2;
  string mainUser = 3;
}

message LockDoorReq {
  bool locked = 1;
  string mainUser = 2;
}

message LockReq {
  bool request = 1;
  string mainUser = 2;
}
message LockResp {
  bool success = 1;
}

//a request from de1 to first time set up the connection with server
message LockConnection {
  bool setup = 1;
  string mainUser = 2;
}


message BluetoothInfo{
  string de1ID = 1;
  string username = 2;
  string mainUser = 3;
}

message MainUser{
  string username = 1;
  string mainUser = 2;
}

service Route {
  rpc AddTrustedUser(stream User) returns (Empty) {}
  rpc UpdateTrustedUser(stream User) returns (Empty) {}
  rpc VerifyUserFace(stream FaceVerificationReq) returns (FaceVerificationResp) {}
  rpc RemoveTrustedUser(User) returns (Empty) {}
  rpc GetUserPhoto(User) returns (stream Photo) {}
  rpc GetAllUserNames(Empty) returns (UserNames) {}


  //history record and permission
  rpc  GetHistoryRecorded(Timestamp) returns (HistoryRecords){}
  rpc  GetHistoryImage(ImageLocation) returns (stream Photo){}
  rpc  DeleteRecords(ImageLocation) returns (Empty){}
  
  //get the latest image when app gets the notification 
  rpc GetLatestImage(Empty) returns (stream Photo){}

  //update the device token 
  rpc UpdateDeviceToken(DeviceVerify) returns (Empty){}

  rpc LockDoor(LockDoorReq) returns (LockResp){}

  rpc RequestToLock(stream LockConnection) returns (stream LockReq){}


  //update the de1 id and username
  rpc SendDe1ID(BluetoothInfo) returns (Empty){}

  //get the de1 id and username
  rpc GetDe1ID(MainUser) returns (BluetoothInfo){}
}